Spring 容器
Spring 的生命中周期，以及装载过程。
1、Spring 对bean 进行是咧化
2、Spring 将值和bean的引用注入进bean对应的属性中
3、如果bean实现了BeanNameAware 接口，Spring将Bean的ID传给SetBeanName()接口方法
4、如果Bean是实现了BeanFactoryAware接口，Spring将调用SetBeanFactory()方法，将BeanFactory容器是咧传入
5、如果Bean实现了ApplicationContextAware接口，Spring将条用SetApplicationContext()方法，将引入上下文实例对象
6、如果Bean实现了InitializingBean接口，Spring 将调用它们的afterPropertitiesSet()方法，类似于XMl配置的init-method申明的初始化方法
7、。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。
如果上述步骤完成则Bean已经准备就绪，也就意味着可被调用，将直接驻留在上下文容器中，知道上下文对象被销毁。或者是实现了DisposableBean接口，spring将调用destroy
方法。类似于XMl配置的destroy-method申明的初始化方法


spring 所包含的几个模块：Spring PortFolio提供其他模块
1、Spring Web Flow 建立在Spring Mvc框架之上并为基于流程的会话式Web应用。（http://www.springsource.org/webflow）
2.Spring web Service
3.Spring Security  基于安全的一个模块
4。Spring Integration
5.Spring Batch 对数据进行大量操作的一个模块
6.Spring Dynamic Modules

2、SpEl值上执行操作 ,如果指定T()该价值在于，通过该预算符可以访问指定类的静态方法和常量
#{} 在配置value时 可以通过EL表达式进行装配值
<bean id ="aa"> 假如bean aa中有一个bb方法返回一个值
<bean>
 <property name="bb" value="#{aa.bb}"
  <property name="cc" value="#{T(java.lang.Math).PI}"相当于访问了Math类中的PI常量
</bean>
三元运算符
?:
特殊的标签
<util:list>标签可以初始化一些集合

3、几种比较重要的注解：
<context:annotation-config>元素告诉Spring打算使用基于注解的自动装配，但是还是需要定义<bean>
3.1、Spring 自带的@Autowired注解  还可以配限定注解@Qualifier注解 
3.2、JSR-330的@Inject 注解，还可以配置限定注解@Name
3.3、JSR-250的@Resource注解
<context:component-scan>属于扫描型注解，查找使用，也就也为着我们不需要再使用<bean>标签去进行定义。
查找使用（steretype）注解所标注的类，特殊的注解如下。
@Component -通用的构造型注解，标识该类为Spring组件
@Controller-标识将该类定义为SpringMVC controller
@Repository -标识该类定义为数据仓库
@Service-标识将该类定义为服务
如果某个类在在配置扫描后，发现某个类被@configuration所标识，则这个类其实就相当于是xmL中<beans>的一个命名空间。在某个方法用@bean注解。这也使用Spring基于java的配置。



AOP面向切面的编程理念
概念织入：织入是将切面应用到目标对象来创建新的代理对象的过程。（切面在目标对象的生命周期里几个织入点）
编译期：切面在目标类编译时被织入，这种方式需要特殊的编译器，As-pectJ
类加载期：切面在目标加载到JVM时被织入
运行期：切面在应用运行的某个时刻被织入

AOP 不仅可以为对象已拥有的方法添加新的功能，实际上还可以为对象添加额外的方法，在配置中可声明
<aop:config>
   <!-- 通知 -->
    <aop:aspect ref="MinderReader">
    <!-- 在切面的声明中还可以为对象声明新的方法，并不仅仅局限于为已有的方法提供功能增强 -->
     <aop:declare-parents types-matching="org.cxj.springTest.Thinker+" 
     implement-interface="org.cxj.springTest.Writter"
     default-impl="org.cxj.springTest.impl.VolunteerWritter"/>
     <!-- 切入点 -->
      <aop:pointcut expression="execution(* org.cxj.springTest.Thinker.thinkOfSomething(org.cxj.dao.pojo.Pojo)) 
      and args(thoughts)" id="thinking"/>
      <!-- 在执行志愿者的想法方法时，先读心者去读志愿者的思想。 -->
      <aop:before method="readerThougth" pointcut-ref="thinking" arg-names="thoughts"/>
    </aop:aspect>
 </aop:config>
 
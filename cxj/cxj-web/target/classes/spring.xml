<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:context="http://www.springframework.org/schema/context"
    xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
     http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
     http://www.springframework.org/schema/util  http://www.springframework.org/schema/util/spring-util-3.1.xsd"
     >
     
     
    
   
   
   <context:component-scan base-package="org.cxj.service"/>
   
   
   
   
 
  <!-- 读取工程外的配置文件资源，放入spring容器中，因此可以将properties等配置文件放入外面 -->
	 <!-- <bean id="configProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
	        <property name="locations"> 
	        	<list> 
	        	  <value>file:${config.home.dir}/osp_configs/dbconfig/database.properties</value> 
	              <value>file:${config.home.dir}/osp_configs/other/other.properties</value>  
	              <value>file:${config.home.dir}/osp_configs/service/services.properties</value>   
	            </list>  
	        </property>
	    </bean> -->
    
	<!-- <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer">  
		<property name="ignoreUnresolvablePlaceholders" value="true" />
        <property name="properties" ref="configProperties"/>
    </bean> -->
 




 <import resource="/datasource/spring-cxj-ds.xml"/>

 <bean id = "dd" class="org.cxj.service.impl.testServiceImpl"></bean>
  
  
  <!-- spring的学习 用el表达式 -->
  <!-- <bean id = "test" class="cn.cxj.controller.testController">
   <property name="name" value="#{dd.getCount()}"></property>
   <property name="service" value="#{dd.getSortService()}"></property>
  </bean> -->
  
  
 <!-- AOP的事例配置  -->
 <!-- 第一步先申明通知 aspect -->
 <bean id="MinderReader" class="org.cxj.springTest.impl.CxjReader"/>
 
 <bean id="volunteer" class="org.cxj.springTest.impl.Volunteer"></bean>
 <aop:config>
   <!-- 通知 -->
    <aop:aspect ref="MinderReader">
    <!-- 在切面的声明中还可以为对象声明新的方法，并不仅仅局限于为已有的方法提供功能增强 -->
     <aop:declare-parents types-matching="org.cxj.springTest.Thinker+" 
     implement-interface="org.cxj.springTest.Writter"
     default-impl="org.cxj.springTest.impl.VolunteerWritter"/>
     <!-- 切入点 -->
      <aop:pointcut expression="execution(* org.cxj.springTest.Thinker.thinkOfSomething(org.cxj.dao.pojo.Pojo)) 
      and args(thoughts)" id="thinking"/>
      <!-- 在执行志愿者的想法方法时，先读心者去读志愿者的思想。 -->
      <aop:before method="readerThougth" pointcut-ref="thinking" arg-names="thoughts"/>
    </aop:aspect>
 </aop:config>
 
 
</beans>    